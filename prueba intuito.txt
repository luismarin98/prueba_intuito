Mapeo(entidades de la base de datos)

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace YourNamespace
{
    public class BaseEntity
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        
        [Required]
        public bool Status { get; set; } = true;
    }

    public class BillboardEntity : BaseEntity
    {
        [Required]
        public DateTime Date { get; set; }
        
        [Required]
        public TimeSpan StartTime { get; set; }
        
        [Required]
        public TimeSpan EndTime { get; set; }

        [ForeignKey("Movie")]
        public int MovieId { get; set; }
        public MovieEntity Movie { get; set; }

        [ForeignKey("Room")]
        public int RoomId { get; set; }
        public RoomEntity Room { get; set; }
    }

    public class BookingEntity : BaseEntity
    {
        [Required]
        public DateTime Date { get; set; }

        [ForeignKey("Customer")]
        public int CustomerId { get; set; }
        public CustomerEntity Customer { get; set; }

        [ForeignKey("Seat")]
        public int SeatId { get; set; }
        public SeatEntity Seat { get; set; }

        [ForeignKey("Billboard")]
        public int BillboardId { get; set; }
        public BillboardEntity Billboard { get; set; }
    }

    public class CustomerEntity : BaseEntity
    {
        [Required]
        [MaxLength(20)]
        [Index(IsUnique = true)]
        public string DocumentNumber { get; set; }

        [Required]
        [MaxLength(30)]
        public string Name { get; set; }

        [Required]
        [MaxLength(30)]
        public string Lastname { get; set; }

        [Required]
        public short Age { get; set; }

        [MaxLength(20)]
        public string PhoneNumber { get; set; }

        [MaxLength(100)]
        public string Email { get; set; }
    }

    public enum MovieGenreEnum { ACTION, ADVENTURE, COMEDY, DRAMA, FANTASY, HORROR, MUSICALS, MYSTERY, ROMANCE, SCIENCE_FICTION, SPORTS, THRILLER,WESTERN }

    public class MovieEntity : BaseEntity
    {
        [Required]
        [MaxLength(100)]
        public string Name { get; set; }

        [Required]
        public MovieGenreEnum Genre { get; set; }

        [Required]
        public short AllowedAge { get; set; }

        [Required]
        public short LengthMinutes { get; set; }
    }

    public class RoomEntity : BaseEntity
    {
        [Required]
        [MaxLength(50)]
        public string Name { get; set; }

        [Required]
        public short Number { get; set; }
    }

    public class SeatEntity : BaseEntity
    {
        [Required]
        public short Number { get; set; }

        [Required]
        public short RowNumber { get; set; }

        [ForeignKey("Room")]
        public int RoomId { get; set; }
        public RoomEntity Room { get; set; }
    }
}

Repositorio(respositorio base de todas las entidades proporciona chapter)

a. Generar el query necesario para obtener las reservas de películas cuyo genero sea terror y con un rango de fechas

SELECT
  entidad_reserva.id_reserva,
  entidad_reserva.`date`,
  entidad_reserva.id_cliente,
  entidad_reserva.id_asiento,
  entidad_reserva.id_cartelera,
  entidad_pelicula.`Nombre`,
  entidad_pelicula.genero
FROM entidad_reserva
INNER JOIN entidad_pelicula ON entidad_pelicula.id_pelicula
WHERE entidad_pelicula.genero = 'HORROR'
AND entidad_reserva.`date` BETWEEN '2023-10-30' AND '2023-10-30';

b. Generar el query necesario para obtener el numero de butacas disponibles y ocupadas por sala en la cartelera del día actual.

SELECT
  entidad_asiento.`Number`,
  entidad_asiento.`RowNumber`,
  COUNT(entidad_reserva.id_reserva) AS occupied_seats
FROM entidad_asiento
LEFT JOIN entidad_reserva
ON entidad_asiento.id_asiento = entidad_reserva.id_asiento
WHERE entidad_reserva.`Date` = CURRENT_DATE
GROUP BY entidad_asiento.`Number`, entidad_asiento.`RowNumber`;

Servicios(estructura básica de los servicios(arquitectura hexagonal) y DTOS )

a. Implementar el método con transaccionalidad para inhabilitar la butaca y cancelar la reserva.
MySqlCommand cmd = new MySqlCommand();
cmd.Connection = mConexion.getConnection();
try
{
    cmd.Connection.Open();

    //Obtengo la butaca asociada a la reserva
    cmd.CommandText = "SELECT id_asiento FROM entidad_reserva WHERE id_reserva = @id_reserva";
    cmd.Parameters.AddWithValue("@id_reserva", id_reserva);
    int id_asiento = Convert.ToInt32(cmd.ExecuteScalar());

    //Inhabilito la butaca
    cmd.CommandText = "UPDATE entidad_asiento SET Estado = 0 WHERE id_asiento = @id_asiento";
    cmd.Parameters.AddWithValue("@id_asiento", id_asiento);
    cmd.ExecuteNonQuery();

    //Cancelo la reserva
    cmd.CommandText = "DELETE FROM entidad_reserva WHERE id_reserva = @id_reserva";
    cmd.ExecuteNonQuery();

    cmd.Connection.Close();
}
catch (MySqlException ex)
{
    throw ex;
}
finally
{
    cmd.Dispose();
    cmd.Connection.Close();
    cmd.Dispose();
}

b. Implementar el método con transaccionalidad para cancelar la cartelera y cancelar todas las reservas de la sala, adicional se debe habilitar las butacas e imprimir por consola la lista de clientes que fueron afectados.
public void CancelBillboard(int billboardId)
{
    MySqlConnection connection = mConexion.getConnection();
    MySqlCommand command = connection.CreateCommand();
    MySqlTransaction transaction = null;

    try
    {
        connection.Open();

        // Obtener el ID de la sala asociada a la cartelera
        command.CommandText = "SELECT id_Sala FROM entidad_cartelera WHERE id_cartelera = @id_cartelera";
        command.Parameters.AddWithValue("@id_cartelera", billboardId);
        int salaId = Convert.ToInt32(command.ExecuteScalar());

        // Comienza una transacción
        transaction = connection.BeginTransaction();

        // Cancelar todas las reservas de la sala
        command.CommandText = "DELETE FROM reservas WHERE id_asiento IN (SELECT id_asiento FROM id_asiento WHERE id_sala = @id_sala)";
        command.Parameters.AddWithValue("@SalaId", salaId);
        command.ExecuteNonQuery();

        // Habilitar todas las butacas de la sala
        command.CommandText = "UPDATE id_asiento SET Estado = 1 WHERE SalaId = @id_sala";
        command.ExecuteNonQuery();

        // Eliminar la cartelera
        command.CommandText = "DELETE FROM entidad_cartelera WHERE Id = @id_cartelera";
        command.ExecuteNonQuery();

        // Confirmar la transacción
        transaction.Commit();
    }
    catch (Exception ex)
    {
        // Revertir la transacción en caso de error
        if (transaction != null)
        {
            transaction.Rollback();
        }
        throw ex;
    }
    finally
    {
        if (transaction != null)
        {
            transaction.Dispose();
        }
        command.Dispose();
        connection.Close();
        connection.Dispose();
    }
}

c. Si se trata de cancelar una cartelera cuando la función sea menor a la fecha actual se debe lanzar una excepción personalizada con el mensaje: 'No se puede cancelar funciones de la cartelera con fecha anterior a la actual'.


Controladores --No pude implementar a tiempo

a. Implementar controlador para administrar butaca 

b. Implementar controlador para administrar la cartelera

b1. Implementar endpoint para el servicio del punto 3 literal a.

b2. Implementar endpoint para el servicio del punto 3 literal b.

c. Implementar el manejo de excepciones con handlers(CustomException/IExceptionHandler).

d. Implementar endpoint para obtener las reservas de películas cuyo genero sea terror y en un rango de fechas.

e. Implementar endpoint para obtener el número de butacas disponibles y ocupadas por sala en la cartelera del día actual.


Pruebas unitarias 

a. Implementar la prueba unitaria para el servicio del punto 3 literal a

Prueba de integración 

a. Implementar la prueba de integración para el query del punto 2 literal a

b. Implementar la prueba de integración para el query del punto 2 literal b

c. Implementar la prueba de integración para el endpoint del punto 4 literal b2